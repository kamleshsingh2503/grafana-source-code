{"version":3,"file":"NotificationsListPage.4cbb87e3c1d0ef5e648d.js","sources":["webpack:////./public/app/core/hooks/useNavModel.ts","webpack:////./public/app/features/alerting/NotificationsListPage.tsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { getNavModel } from '../selectors/navModel';\nimport { NavModel } from '../core';\n\nexport const useNavModel = (id: string): NavModel => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  return getNavModel(navIndex, id);\n};\n","import React, { useState, FC, useEffect } from 'react';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { useAsyncFn } from 'react-use';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport { CoreEvents } from 'app/types';\nimport { AlertNotification } from 'app/types/alerting';\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then(res => {\n      setNotifications(res);\n    });\n  }, []);\n\n  const deleteNotification = (id: number) => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Do you want to delete this notification channel?',\n      text2: `Deleting this notification channel will not delete from alerts any references to it`,\n      icon: 'trash-alt',\n      confirmText: 'Delete',\n      yesText: 'Delete',\n      onConfirm: async () => {\n        deleteNotificationConfirmed(id);\n      },\n    });\n  };\n\n  const deleteNotificationConfirmed = async (id: number) => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map(notification => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAPA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAfA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AACA;;;;A","sourceRoot":""}